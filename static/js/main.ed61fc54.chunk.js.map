{"version":3,"sources":["VedioCard.module.css","Card.module.css","Cards.js","VedioCard.js","VideoWatchPage.js","App.js","serviceWorker.js","index.js","VideoWatchPage.module.css"],"names":["module","exports","Cards","props","className","classes","VideoCard","to","id","Thumbnail","src","thumbnail","alt","Title","title","VedioCard","state","items","axios","get","then","response","setState","data","catch","err","console","log","this","MainContainer","MainHeading","VideoGrid","map","item","key","Component","VideoWatchPage","videos","match","params","videoId","VideodescriptionGrid","divcenter","Videodescriptionwrap","url","vimeoId","width","height","frameBorder","loading","viewcount","views","faicon","class","aria-hidden","h1font","videodecs","description","App","exact","path","component","VedioWatchPage","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,YAAc,+BAA+B,UAAY,+B,mBCA3ED,EAAOC,QAAU,CAAC,UAAY,wBAAwB,UAAY,wBAAwB,MAAQ,sB,4RCanFC,MAXf,SAAeC,GACX,OACI,kBAAC,IAAD,CAAMC,UAAWC,IAAQC,UAAWC,GAAE,uBAAkBJ,EAAMK,KAC9D,6BACC,yBAAKJ,UAAWC,IAAQI,UAAWC,IAAKP,EAAMQ,UAAWC,IAAI,oBAClE,wBAAIR,UAAWC,IAAQQ,OAAQV,EAAMW,UC0B1BC,E,4MA7BXC,MAAM,CACFC,MAAM,I,kEAEU,IAAD,OAClBC,IAAMC,IAAI,wDACTC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACL,MAAM,YAAII,EAASE,WAErCC,OAAM,SAAAC,GACHC,QAAQC,IAAI,oB,+BAGP,IACDV,EAASW,KAAKZ,MAAdC,MACL,OACI,yBAAKb,UAAWC,IAAQwB,eACrB,wBAAIzB,UAAWC,IAAQyB,aAAvB,mBACA,yBAAK1B,UAAWC,IAAQ0B,WAEpBd,EAAMe,KAAI,SAAAC,GACN,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAKzB,GAAIA,GAAIyB,EAAKzB,GAAIM,MAAOmB,EAAKnB,MAAOH,UAAWsB,EAAKtB,qB,GArB3EwB,a,wBCuCTC,E,4MApCXpB,MAAM,CACFqB,OAAO,I,kEAES,IAAD,OACfnB,IAAMC,IAAN,4DAA+DS,KAAKzB,MAAMmC,MAAMC,OAAOC,UACtFpB,MAAK,SAAAC,GACH,EAAKC,SAAS,CACVe,OAAOhB,EAASE,Y,+BAIjB,IACDc,EAAUT,KAAKZ,MAAfqB,OACL,OACI,yBAAKjC,UAAWC,IAAQoC,sBACrB,yBAAKrC,UAAWC,IAAQqC,WAAW,kBAAC,IAAD,CAAMnC,GAAG,KAAT,SAClC,yBAAKH,UAAWC,IAAQsC,sBACxB,kBAAC,IAAD,CAAQC,IAAG,yCAAoCP,EAAOQ,SAC9DC,MAAM,OACNC,OAAO,QACPvC,GAAG,OACHJ,UAAU,cAAc4C,YAAa,IAAIC,QAAQ,SAC7C,yBAAK7C,UAAWC,IAAQ6C,WAAYb,EAAOc,MAC3C,6BACI,kBAAC,IAAD,CAAM/C,UAAWC,IAAQ+C,QAAQ,uBAAGC,MAAM,eAAeC,cAAY,UACrE,kBAAC,IAAD,CAAMlD,UAAWC,IAAQ+C,QAAQ,uBAAGC,MAAM,qBAAqBC,cAAY,UAC3E,kBAAC,IAAD,CAAMlD,UAAWC,IAAQ+C,QAAQ,uBAAGC,MAAM,kBAAkBC,cAAY,YAEhF,yBAAKlD,UAAWC,IAAQkD,QAASlB,EAAOvB,OACxC,yBAAKV,UAAWC,IAAQmD,WAAYnB,EAAOoB,mB,GA9BtBtB,aCYduB,MAXf,WACE,OACE,yBAAKtD,UAAWC,IAAQqD,KACtB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9C,IACjC,kBAAC,IAAD,CAAO6C,KAAK,wBAAwBC,UAAWC,OCAjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5B,MACvB,2DCXN6B,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLnD,QAAQmD,MAAMA,EAAMC,a,kBExI5B9E,EAAOC,QAAU,CAAC,qBAAuB,6CAA6C,qBAAuB,6CAA6C,UAAY,kCAAkC,UAAY,kCAAkC,OAAS,+BAA+B,OAAS,+BAA+B,UAAY,kCAAkC,SAAW,oC","file":"static/js/main.ed61fc54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainHeading\":\"VedioCard_MainHeading__3O_L1\",\"VideoGrid\":\"VedioCard_VideoGrid__1vkkS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VideoCard\":\"Card_VideoCard__N8IC2\",\"Thumbnail\":\"Card_Thumbnail__1scRw\",\"Title\":\"Card_Title__EfAsZ\"};","import React from 'react'\r\nimport classes from './Card.module.css'\r\nimport {Link} from 'react-router-dom'\r\nfunction Cards(props) {\r\n    return (\r\n        <Link className={classes.VideoCard} to={`/video/watch/${props.id}`}>\r\n        <div>\r\n         <img className={classes.Thumbnail} src={props.thumbnail} alt='vedio thumbnail'/>\r\n    <h3 className={classes.Title}>{props.title}</h3>\r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport classes from './VedioCard.module.css'\r\nimport Cards from './Cards'\r\nclass VedioCard extends Component {\r\n    state={\r\n        items:[]\r\n    }\r\n    componentDidMount(){\r\n     axios.get('https://5d76bf96515d1a0014085cf9.mockapi.io/playlist')\r\n     .then(response=>{\r\n         this.setState({items:[...response.data]})\r\n     })\r\n     .catch(err=>{\r\n         console.log('call failed')\r\n     })\r\n    }\r\n    render() {\r\n        let {items} = this.state\r\n        return (\r\n            <div className={classes.MainContainer}>\r\n               <h1 className={classes.MainHeading}>Video Listing!!</h1>\r\n               <div className={classes.VideoGrid}>\r\n                   {\r\n                   items.map(item =>{\r\n                       return <Cards key={item.id} id={item.id} title={item.title} thumbnail={item.thumbnail}/>\r\n                   })\r\n                   }\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VedioCard\r\n","import React, { Component } from 'react'\r\nimport Iframe from 'react-iframe'\r\nimport axios from \"axios\"\r\nimport classes from './VideoWatchPage.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass VideoWatchPage extends Component {\r\n    state={\r\n        videos:[]\r\n    }\r\n    componentDidMount(){\r\n        axios.get(`https://5d76bf96515d1a0014085cf9.mockapi.io/video/${this.props.match.params.videoId}`)\r\n        .then(response=>{\r\n           this.setState({\r\n               videos:response.data\r\n           })\r\n        })\r\n    }\r\n    render() {\r\n        let {videos} = this.state\r\n        return (\r\n            <div className={classes.VideodescriptionGrid}>\r\n               <div className={classes.divcenter}><Link to='/'>home</Link></div> \r\n                <div className={classes.Videodescriptionwrap}>\r\n                <Iframe url={`https://player.vimeo.com/video/${videos.vimeoId}`}\r\n        width=\"100%\"\r\n        height=\"350px\"\r\n        id=\"myId\"\r\n        className=\"myClassname\" frameBorder =\"0\" loading='lazy'/>\r\n            <div className={classes.viewcount}>{videos.views}\r\n            <div>\r\n                <Link className={classes.faicon}><i class=\"far fa-heart\" aria-hidden=\"true\"></i></Link>\r\n                <Link className={classes.faicon}><i class=\"far fa-comment-alt\" aria-hidden=\"true\"></i></Link>\r\n                <Link className={classes.faicon}><i class=\"far fa-bookmark\" aria-hidden=\"true\"></i></Link></div>\r\n            </div>  \r\n        <div className={classes.h1font}>{videos.title}</div>  \r\n        <div className={classes.videodecs}>{videos.description}</div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoWatchPage\r\n","import React from 'react';\nimport {Route, BrowserRouter} from 'react-router-dom'\nimport classes from './App.module.css'\nimport VedioCard from './VedioCard';\nimport VedioWatchPage from './VideoWatchPage'\n\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <BrowserRouter>\n      <Route exact path='/' component={VedioCard}/>\n      <Route path='/video/watch/:videoId' component={VedioWatchPage}/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VideodescriptionGrid\":\"VideoWatchPage_VideodescriptionGrid__8cAZr\",\"Videodescriptionwrap\":\"VideoWatchPage_Videodescriptionwrap__3vi8l\",\"divcenter\":\"VideoWatchPage_divcenter___IL9B\",\"viewcount\":\"VideoWatchPage_viewcount__1gLjJ\",\"faicon\":\"VideoWatchPage_faicon__3AwCC\",\"h1font\":\"VideoWatchPage_h1font__2l_AW\",\"videodecs\":\"VideoWatchPage_videodecs__3Tnzr\",\"cardwrap\":\"VideoWatchPage_cardwrap__3QWhl\"};"],"sourceRoot":""}